<?php
/***************************************************************
*  Copyright notice
*
*  (c) 2012 Franz Holzinger <franz@ttproducts.de>
*  All rights reserved
*
*  This script is part of the TYPO3 project. The TYPO3 project is
*  free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  The GNU General Public License can be found at
*  http://www.gnu.org/copyleft/gpl.html.
*
*  This script is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  This copyright notice MUST APPEAR in all copies of the script!
***************************************************************/


/**
 * Debug extension.
 *
 * @author	Franz Holzinger <franz@ttproducts.de>
 * $Id$
 */
class tx_fhdebug {
	static public $prefixFieldArray =
		array(
			'file' => '',
			'line' => '#',
			'function' => '->'
		);
	static public $csConvObj;

	static protected $bActive = FALSE;	// inactive without initialization
	static protected $bInitialization = FALSE;
	static protected $bErrorWritten = FALSE;

	static private $phpVersionGt50205;
	static private $username;
	static private $bUserAllowed = TRUE;
	static private $extConf = array();
	static private $hndFile = 0;
	static private $typo3mode = '';
	static private $bHasBeenInitialized = FALSE;
	static private $bCreateFile = FALSE;
	static private $processCount = 0;
	static private $bHtml = FALSE;
	static private $bWriteHeader = FALSE;
	static private $instanceCount = 0;


	public function __construct ($newExtConf) {
		self::$extConf = $newExtConf;
		self::$instanceCount++;
		self::$csConvObj = t3lib_div::makeInstance('t3lib_cs');
	}

	public function debugControl (array $parameters) {
	}

	static public function hasError () {
		$result = (self::$bErrorWritten);
		return $result;
	}

	static public function write ($out) {
		if (self::$hndFile) {
			fputs(self::$hndFile, $out);
		} else if ($extConf['DEBUGFILE'] == '') {
			echo $out;
		}
	}

	static public function writeHeader ($cssFilename) {
		$out = '
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
<head>
  <title>Debug generated by fh_debug</title>
  <link rel="stylesheet" href="../' . t3lib_extMgm::siteRelPath(FH_DEBUG_EXTkey) . 'res/' . $cssFilename . '">
</head>

<body>
';
		self::write($out);
	}

	static public function writeBodyEnd () {
		$out =
'</body>';

		self::write($out);
	}

	static public function readIpAddress () {
		$ipAddress = $_SERVER['HTTP_CLIENT_IP'];

		if (!$ipAddress) {
			$ipAddress = t3lib_div::getIndpEnv('REMOTE_ADDR');
		}
		return $ipAddress;
	}

	static public function verifyIpAddress (
		$ipAddress,
		$extConf
	) {
		$dbgMode = ($extConf['TYPO3_MODE'] ? strtoupper($extConf['TYPO3_MODE']) : 'OFF');

		$bIpIsAllowed =
			(
				(TYPO3_MODE == $dbgMode || $dbgMode == 'ALL') &&
				t3lib_div::cmpIP(
					$ipAddress,
					$extConf['IPADDRESS']
				)
			);

		return $bIpIsAllowed;
	}

	static public function init ($ipAddress) {
// error_log ('init START ========================================== ');

		if (self::hasBeenInitialized()) {
// error_log ('init $bHasBeenInitialized');
			return;
		}

		$phpVersion = phpversion();
		self::$phpVersionGt50205 = version_compare($phpVersion, '5.2.5', '>=');

		$extConf = self::getExtConf();
		$backtrace = self::getTraceArray();
//  error_log('init backtrace: ' . print_r($backtrace, TRUE));
//  error_log('init $extConf: ' . print_r($extConf, TRUE));

		if ($extConf['STARTFILES'] != '') {
//  error_log('init $extConf[\'STARTFILES\']: ' . $extConf['STARTFILES']);
			$startFileArray = t3lib_div::trimExplode(',', $extConf['STARTFILES']);
			$bStartFileFound = FALSE;
			if (is_array($startFileArray)) {
				foreach ($startFileArray as $startFile) {
					if ($backtrace['0']['file'] == $startFile) {
//  error_log('init $startFile found: ' . $startFile);
						$bStartFileFound = TRUE;
						break;
					}
				}
			}

//  error_log('init $bStartFileFound: ' . $bStartFileFound);
			if (!$bStartFileFound) {
// error_log ('init kein STARTFILES');
				return;
			}
		}

		self::setIsInitialization(TRUE);

		if (TYPO3_MODE == 'FE') {
			if (is_array($GLOBALS['TSFE']->fe_user->user)) {
				self::processUser();
			}
		}

		if (!$extConf['DEBUGBEGIN']) {
// error_log ('init setActive TRUE');
			self::setActive(TRUE);
		}

// error_log ('======================================== init $extConf: '.print_r($extConf, TRUE));
		if ($extConf['HTML'] == '1') {
			self::$bHtml = 1;
		}

		if (self::$bUserAllowed && $extConf['DEBUGFILE'] != '') {
			if (self::$hndFile) {
				fclose(self::$hndFile);
				self::$hndFile = FALSE;
			}

			$processFilename = self::getProcessFilename();
// error_log ('init $processFilename = ' . $processFilename);

			if (!is_writable($processFilename)) {
				$hndProcessfile = fopen($processFilename, 'w+b');
				$readBytes = 0;
			} else {
				$hndProcessfile = fopen($processFilename, 'r+b');
				$readBytes = filesize($processFilename);
			}
// error_log ('init $readBytes = ' . $readBytes);
			if ($hndProcessfile) {
				if ($readBytes) {
					$processCount = intval(fread($hndProcessfile, $readBytes));
					$processCount++;
// error_log ('init $processCount = ' . $processCount);
				} else {
					$processCount = 1;
// error_log ('init $processCount = ' . $processCount);
				}
				if ($processCount > intval($extConf['APPENDDEPTH'])) {
					$processCount = 1;
					self::$bCreateFile = TRUE;
				}
// error_log ('init write $processCount = ' . $processCount);
				self::writeTemporaryFile($processCount);
			}
			$extPath = PATH_typo3conf;
			$filename = t3lib_div::resolveBackPath($extPath . '../' . $extConf['DEBUGFILE']);
			$path_parts = pathinfo($filename);

			if (is_writable($path_parts['dirname'])) {
				self::$bWriteHeader = self::$bHtml;

				if ($extConf['APPENDDEPTH'] > 1) {
					if (self::$bCreateFile) {
						$openMode = 'w+b';
					} else {
						$openMode = 'a+b';
						self::$bWriteHeader = FALSE;
					}
				} else {
					$openMode = $extConf['DEBUGFILEMODE'];
				}
				self::$hndFile = fopen($filename, $openMode);

				if (self::$hndFile !== FALSE) {

					if (self::$bWriteHeader) {
						self::writeHeader($extConf['CSSFILE']);
					}
					self::debug(
						date('H:i:s  d.m.Y') . '  (' . $ipAddress . ')', 'start date, time and IP of debug session (mode "' . $openMode . '")',
						'',
						'',
						FALSE
					);
// error_log ('nach debug start date and time ');
				}
			} else {
// error_log ('vor setActive Pos 2 ');


// error_log ('init setActive FALSE');

				self::setActive(FALSE); // no debug is necessary when the file cannot be written anyways
			}

			if (!self::$hndFile && !is_writable($filename)) {
				t3lib_div::devLog(
					'DEBUGFILE: "' . $filename . '" is not writable in mode="' . $openMode . '"',
					FH_DEBUG_EXTkey,
					0
				);
				t3lib_div::sysLog(
					'DEBUGFILE: "' . $filename . '" is not writable in mode="' . $openMode . '"',
					FH_DEBUG_EXTkey,
					0
				);
			}
		}

		if (t3lib_div::cmpIP($ipAddress, '127.0.0.1')) {
			if (
				t3lib_div::cmpIP(
					$ipAddress,
					$extConf['IPADDRESS']
				)
			) {
				// nothing
			} else {
				self::debug(
					$ipAddress,
					'Attention: The server variable REMOTE_ADDR is set to local.',
					'',
					'',
					FALSE
				);
// error_log ('vor setActive Pos 3 ');
// error_log ('init setActive FALSE');
				self::setActive(FALSE);
			}
		}

		self::setHasBeenInitialized(TRUE);
		self::setIsInitialization(FALSE);
// error_log ('init ENDE ========================================== ');
	}

	static public function getProcessFilename () {
		$result = PATH_site . 'typo3temp/fh_debug.txt';
		return $result;
	}

	static public function bIsActive () {

// error_log ('bIsActive self::$bActive = ' .  self::$bActive);
		return self::$bActive;
	}

	static public function setActive ($v) {
// if ($v) {
// error_log ('function setActive = ' . $v);
//
// $backtrace = self::getTraceArray();
// error_log('setActive backtrace: ' . print_r($backtrace, TRUE));
// }
		self::$bActive = $v;
	}

	static public function setIsInitialization ($bInitialization) {
// error_log ('function setIsInitialization = ' . $bInitialization);
		self::$bInitialization = $bInitialization;
	}

	static public function bIsInitialization () {
// error_log ('bIsInitialization self::$bInitialization = ' .  self::$bInitialization);
		return self::$bInitialization;
	}

	static public function setHasBeenInitialized ($bHasBeenInitialized) {
// error_log ('function setHasBeenInitialized = ' . $bHasBeenInitialized);
		self::$bHasBeenInitialized = $bHasBeenInitialized;
	}

	static public function hasBeenInitialized () {
// error_log ('hasBeenInitialized self::$bHasBeenInitialized = ' .  self::$bHasBeenInitialized);
		return self::$bHasBeenInitialized;
	}

	/* determines if the PHP function debug_backtrace() may be called with the parameter to not populate the object index */
	static public function hasBacktraceParam () {
		return self::$phpVersionGt50205;
	}

	static public function debugBegin () {

		if (self::hasBeenInitialized() && !self::hasError()) {
			$extConf = self::getExtConf();

			if ($extConf['DEBUGBEGIN']) {
				self::setActive(TRUE);

				$ipAdress = self::readIpAddress();
				self::debug(
					'debugBegin (' . $ipAddress . ') BEGIN >----- ----- ----->', 'debugBegin',
					'',
					'',
					TRUE
				);

/*$backtrace = self::getTraceArray();
error_log('debugBegin backtrace: ' . print_r($backtrace, TRUE));*/
			}
		}
	}

	static public function debugEnd () {
		if (self::hasBeenInitialized() ) {
			$extConf = self::getExtConf();

			if ($extConf['DEBUGBEGIN']) {
				$ipAdress = self::readIpAddress();
				self::debug(
					'debugEnd (' . $ipAddress . ') END <----- ----- -----<', 'debugEnd',
					'',
					'',
					TRUE
				);
				self::setActive(FALSE);

/*$backtrace = self::getTraceArray();
error_log('debugEnd backtrace: ' . print_r($backtrace, TRUE));*/
			}
		}
	}

	static public function getExtConf () {
		$rc = self::$extConf;

		return $rc;
	}

	static public function getTraceFieldArray () {
		$extConf = self::getExtConf();
		$rc = t3lib_div::trimExplode(',', $extConf['TRACEFIELDS']);

		return $rc;
	}

	static public function getTraceArray ($depth = 0, $offset = 2) {

		if (self::hasBacktraceParam()) {
			$trail = debug_backtrace(FALSE);
		} else {
			$trail = debug_backtrace();
		}

		$last = count($trail) - 1;

		if (!$depth) {
			$depth = $last + 1;
			$offset = 0;
		}

		$traceFieldArray = self::getTraceFieldArray();
		$traceArray = array();
		$j = $depth - 1;

		for ($i = $offset; $i <= $last ; ++$i) {
			if (!isset($trail[$i])) {
				continue;
			}
			$theTrail = $trail[$i];
			if (!is_array($theTrail)) {
				continue;
			}

			foreach ($traceFieldArray as $traceField) {
				$v =
					(
						$traceField == 'file' && $theTrail['file'] != '' ?
							basename($theTrail[$traceField]) :
							$theTrail[$traceField]
					);
				$traceArray[$j][$traceField] = $v;
			}
			$j--;

			if ($j < 0) {
				break;
			}
		}
		ksort($traceArray);

		return $traceArray;
	}

	static public function printTraceLine ($traceArray) {
		$rc = '';
		$debugTrail = array();
		$extConf = self::getExtConf();

		if (is_array($traceArray) && count($traceArray)) {
			foreach ($traceArray as $i => $trace) {
				if (self::$bHtml) {
					$debugTrail[$i] .= '<tr>';
					foreach ($trace as $field => $v) {
						$debugTrail[$i] .= '<td>'; //  bgcolor="#E79F9F"
						$debugTrail[$i] .=  self::$prefixFieldArray[$traceField] . $v;
						$debugTrail[$i] .= '</td>';
					}
					$debugTrail[$i] .= '</tr>';
				} else {
					$debugTrail[$i] .= '|';
					foreach ($trace as $field => $v) {
						$debugTrail[$i] .=  self::$prefixFieldArray[$traceField] . $v;
						$debugTrail[$i] .= '|';
					}
					$debugTrail[$i] .= chr(13);
				}
			}
			$rc = implode('', $debugTrail);
			if (self::$bHtml) {
				$rc = '<table>' . $rc . '</table>';
			} else {
				$rc = chr(13) . '==============================' . chr(13) . $rc . chr(13);
			}
		}
		return $rc;
	}

	static public function printArrayVariable ($variable, $depth) {

		$extConf = self::getExtConf();

		if ($depth < $extConf['LEVEL']) {

			$debugArray = array();
			if (self::$bHtml) {
				foreach ($variable as $k => $v1) {
					$debugArray[$k] .= '<tr>';
					$td = '<td>';
					$debugArray[$k] .= $td;
					$debugArray[$k] .=  nl2br(htmlspecialchars($k));
					$debugArray[$k] .= '</td>';
					if (is_array($v1)) {
						$debugArray[$k] .= '<td>';
						$debugArray[$k] .= self::printArrayVariable($v1, $depth + 1);
						$debugArray[$k] .= '</td>';
					} else if (is_object($v1)) {
						$debugArray[$k] .= '<td>';
						$debugArray[$k] .= self::printObjectVariable($v1, $depth + 1);
						$debugArray[$k] .= '</td>';
					} else {
						$td = '<td>';
						$debugArray[$k] .= $td . nl2br(htmlspecialchars($v1)) . '</td>';
					}
					$debugArray[$k] .= '</tr>';
				}
			} else {
				foreach ($variable as $k => $v1) {
					$debugArray[$k] .=  $k;
					$debugArray[$k] .= '|';
					if (is_array($v1)) {
						$debugArray[$k] .= self::printArrayVariable($v1, $depth + 1);
					} else if (is_object($v1)) {
						$debugArray[$k] .= self::printObjectVariable($v1, $depth + 1);
					} else {
						$debugArray[$k] .=  $v1;
					}
					$debugArray[$k] .= '|' . chr(13);
				}
			}

			$rc = implode('', $debugArray);

			if (self::$bHtml) {
				$rc = '<table>' . $rc . '</table>';
			}
		} else {
			$rc = '...';
		}
// error_log ('printArrayVariable $rc = ' . $rc);
		return $rc;
	}

	static public function printObjectVariable ($variable, $depth) {
		$vars = (array) @get_object_vars($variable);
		$rc = self::printArrayVariable($vars, $depth);

		return $rc;
	}

	static public function printVariable ($variable) {
		$rc = '';
		$debugArray = array();
		$extConf = self::getExtConf();

		if (is_array($variable)) {
			$rc = self::printArrayVariable($variable, 0);
		} else if (is_object($variable))	{
			$rc = self::printObjectVariable($variable, 0);
		} else {
			if (self::$bHtml) {
				$rc = '<p>' . nl2br(htmlspecialchars($variable)) . '</p>';
			} else {
				$rc = $variable;
			}
		}
		return $rc;
	}

	static public function processUser () {
		if (TYPO3_MODE == 'FE') {
			if (is_array($GLOBALS['TSFE']->fe_user->user)) {
				$username = $GLOBALS['TSFE']->fe_user->user['username'];
			}

			if ($username != self::$username) {
				self::$username = $username;
				self::$bUserAllowed = TRUE;

				$extConf = self::getExtConf();
				if ($extConf['FEUSERNAMES'] != '') {
					$tmpArray = t3lib_div::trimExplode(',', $extConf['FEUSERNAMES']);
				}

				if (
					isset($tmpArray) &&
					is_array($tmpArray) &&
					in_array($username, $tmpArray) === FALSE
				) {
					self::$bUserAllowed = FALSE;
				}
			}
		}
	}

	static public function getTypeView ($variable) {
		$rc = '';
		$type = gettype($variable);
		switch ($type) {
			case 'array':
				$rc = ' (' . $type . ' of ' . count($variable) . ' items )';
			break;
			case 'object':
				$rc = ' (' . $type . ' of class ' . get_class($variable) . ')';
			break;
			default:
				$rc = ' (' . $type . ')';
		}
		return $rc;
	}

	static public function writeTemporaryFile ($processCount) {
		$processFilename = self::getProcessFilename();
		$hndProcessfile = fopen($processFilename, 'r+');
		ftruncate($hndProcessfile, 0);
		rewind($hndProcessfile);
		fwrite($hndProcessfile, $processCount);
		self::$processCount = $processCount;
		fclose($hndProcessfile);
	}

	static public function debug (
		$variable = '',
		$name = '*variable*',
		$line = '*line*',
		$file = '*file*',
		$bTrace = 1,
		$debugLevel = E_DEBUG
	) {
		$bControlMode = FALSE;

/*error_log('debug $variable = ' . print_r($variable, TRUE));
error_log('debug $name = ' . print_r($name, TRUE));
*/
		if ($name == 'control:resetTemporaryFile') {
			self::writeTemporaryFile(0);
			self::$bCreateFile = TRUE;
			$bControlMode = TRUE;
		}

		if (
			!$bControlMode &&
			(self::bIsActive() || self::bIsInitialization())
		) {
			if (TYPO3_MODE == 'FE') { // hooks for FE extensions

				$csConvObj = &$GLOBALS['TSFE']->csConvObj;
				if (is_object($csConvObj) && $GLOBALS['TSFE']->renderCharset != '') {
	 				$name = $csConvObj->conv(
						$name,
						'utf-8',
						$GLOBALS['TSFE']->renderCharset
					);
				}
			}
			$storeIsActive = self::bIsActive();
			self::setActive(FALSE);
			self::processUser();

			$extConf = self::getExtConf();

			if (self::$bUserAllowed) {

				if (self::$typo3mode != TYPO3_MODE) {
					$appendText = ' - counter: ' . self::$processCount;
					switch (TYPO3_MODE) {
						case 'FE':
							if (self::$bHtml) {
								$head = '<h3>Front End Debugging' . $appendText . '</h3>';
							} else {
								$head = '#Front End Debugging' . $appendText . '#';
							}
							break;
						case 'BE':
							if (self::$bHtml) {
								$head = '<h3>Back End Debugging' . $appendText . '</h3>';
							} else {
								$head = '#Back End Debugging' . $appendText . '#';
							}
							break;
					}
					self::$typo3mode = TYPO3_MODE;
				} else {
					$head = '';
				}

				if (
					self::$hndFile ||
					$extConf['DEBUGFILE'] == ''
				) {
					$traceArray = ($bTrace ? self::getTraceArray($extConf['TRACEDEPTH']) : array());
					$content = self::printTraceLine($traceArray);

					if (self::$bHtml) {
						$out = 	$head . $content . '<br/>' .
							self::printVariable($variable) . chr(13) .
							'<h3>' . $name . self::getTypeView($variable) . '</h3>' .
							'<hr/>' . chr(13);
					} else {
						$out = 	$head . $content . '|' .
							self::printVariable($variable) . chr(13) .
							'###' . $name . self::getTypeView($variable) . '###' . chr(13) .
							'--------------------------------------------' . chr(13);
					}
				}

				$charset = mb_detect_encoding($out, 'utf-8, iso-8859-1');
				fputs(self::$hndFile, 'charset = ' . $charset);

				if ($GLOBALS['TYPO3_CONF_VARS']['SYS']['t3lib_cs_convMethod'] != '') {
					$out = self::$csConvObj->conv($out, $charset, 'utf-8');
				}

				if (self::$hndFile) {
					fputs(self::$hndFile, $out);
				} else if ($extConf['DEBUGFILE'] == '') {
					echo $out;
				} else if (!self::$bErrorWritten) {
					$overwriteModeArray = array('x', 'x+', 'xb', 'x+b');
					if (
						file_exists($extConf['DEBUGFILE']) &&
						in_array($extConf['DEBUGFILEMODE'], $overwriteModeArray)
					) {
						echo '<b>DEBUGFILE: "' . $extConf['DEBUGFILE'] . '" is not empty.</b>';
					} else {
						echo '<b>DEBUGFILE: "' . $extConf['DEBUGFILE'] . '" is not writable.</b>';
					}
					self::$bErrorWritten = TRUE;
				}
			}

			self::setActive($storeIsActive);
		}
	}

	public function __destruct () {
// error_log ('__destruct');
		if (self::$hndFile) {
			self::$instanceCount--;

// error_log ('__destruct self::$instanceCount ' . self::$instanceCount);
			$extConf = self::getExtConf();
			if (!self::$instanceCount && $extConf['APPENDDEPTH'] == '0') {
				self::writeBodyEnd();
			}

			if (!self::$instanceCount) {
				fclose(self::$hndFile);
				self::setHasBeenInitialized(FALSE);
				self::$hndFile = NULL; // this is a static class which remains even after the closing of the object
// error_log ('__destruct delete $hndFile');
			} else {
				fflush(self::$hndFile);
			}
		}
// error_log ('__destruct close');
	}
}


/**
 * This function provides a shortcut so you don't have to use the class directly
 */
function fhdebug (
	$variable = '',
	$name = '*variable*',
	$line = '*line*',
	$file = '*file*',
	$traceDepth = 3,
	$debugLevel = E_DEBUG
) {
	global $TYPO3_CONF_VARS, $myDebugObject;

	$myDebugObject->debug(
		$variable,
		$name,
		$line,
		$file,
		$traceDepth,
		$debugLevel
	);
}



if (defined("TYPO3_MODE") && $TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/fh_debug/lib/class.tx_fhdebug.php'])	{
	include_once($TYPO3_CONF_VARS[TYPO3_MODE]['XCLASS']['ext/fh_debug/lib/class.tx_fhdebug.php']);
}

?>